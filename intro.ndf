set "diagram ;

A gets 'hello' ;
B gets 'world' ;
A_B := A B ;
Numbers := 45.2 3.7 -35.3 87.14 ;
SumNumbers := sum Numbers ;
TallyNumbers := tally Numbers ;
LinkAB := link A ' ' B ;
NumsHello := (count 5) 'hello' ;

% Create table ;
Table := 3 4 reshape count 12 ;

% Rows are cols ;
TransTable := transpose Table ;

% Cols ;
TableCols := cols Table ;

% Rows ;
TableRows := rows Table ;

% Corresponding elements ;
PackTableRows := pack TableRows ;

% Define operation ;
average IS OPERATION A { sum A / tally A }

% Three dimensional array ;
TDA gets 2 3 4 reshape count 24 ;

% List of tables ;
LOT gets 1 raise TDA ;

% Table of lists ;
TOL gets 2 raise TDA ;

% Reverse list ;
Rev_LOT gets reverse LOT ;

% Reverse each element ;
Rev_LOT_items gets EACH reverse LOT ;

% Undo raise with mix ;
TDA1 := mix LOT ;
TDA2 := mix TOL ;

Data gets 3 3 reshape 23 34 12 38 18 26 37 13 42 ;
Corner := phrase 'Crop Yields' ;
Collab := "Oats "Rice "Corn ;
Rowlab := EACH phrase 'None' 'Arsenic' 'Old Lace' ;

labeltable IS OPERATION Corner Rowlabel Columnlabel Table {
	% Combine the labels ;
	Firstrow := Corner hitch Columnlabel ;
	% Hitch labels to the rows ;
	Labelledrows := Rowlabel EACHBOTH hitch rows Table ;
	% Hitch labels to the rows and mix ;
	mix ( Firstrow hitch Labelledrows ) }


Result := labeltable Corner Rowlab Collab Data ;

X := 2 3 reshape (8 9) 23 'hello world' "goodbye (tell 3 2) ([sin,cos]0.5) ;

% 2 3 ;
Shape_X := shape X ;
% 2 ;
Valence_X := valence X ;
% 2 * 3 = 6 ;
Tally_X := tally X ;

Notation_1 := 2 3 reshape 4 5 6 7 8 9 ;
Notation_2 := reshape ((2 3)(4 5 6 7 8 9)) ;

% 2 4 ;
Firsts := (EACH first)((2 3)(4 5 6 7 8 9)) ;

% 2 15 ;
Example_sum := 2 3 4 EACH first sum 4 5 6 ;

% Bracket notation ;
Ex_1 := [34,275,86,-52] ;
Ex_2 := [] ;

% Atlas ;
Atlas := [sin,cos,sqrt] 3.14 ;

average2 IS / [sum,tally]

T := 3 4 reshape count 12 ;

% Grid adresses ;
Grid_example := grid T ;

Elem_1 := 1 2 pick T ;

C := count 5 ;

% Last element ;
Elem_2 := 4 pick C ;
Elem_3 := [4] pick C ;

% Multiple items ;
Mult := [1 2,2 3,0 0] choose T ;

% Indexing notation ;
Elem_4 := T@(1 2) ;

% Assignment Expressions ;
Z gets count 20 ;
A B C := 10 20 30 ;
Z@2 := tell Z@5 ;

% Selector Expressions ;

H gets 0 ;

W gets IF H = 0 THEN
	"Infinity
ELSE
	B / abs A 
ENDIF ;

R gets -2 ;
U gets 10 ;

IF R=0 THEN
	G := ?undefined ;
ELSEIF R < 0 THEN
	G := U / opposite R ;
ELSE
	G := U / R ;
ENDIF ;

% write link 'G is ' (string G) ;

% Case expression ;
Angle gets 45 ;
N_var gets 2 ;

Case_result := CASE N_var FROM
	1: sin Angle END
	2: cos Angle END
	3: tan Angle END
	ELSE
		fault 'unexpected value of N_var'
	ENDCASE ;

% Iterations ;

% While ;
File := open "myfile "r ;
Record := readfile File ;
WHILE Record ~= ??eof DO
	% write Record ;
	Record := readfile File ;
ENDWHILE ;
close File ;

% For ;
P gets count 21 ;

FOR I WITH count 20 DO
	P@I := I*I ;
ENDFOR

Records := getfile "myfile ;
FOR Record with Records DO
	 % write Record ;
ENDFOR ;

File := open "myfile "r ;
WHILE (Record := readfile File) ~= ??eof DO
	% write Record ;
ENDWHILE ;
close File ;

% Blocks ;

Block_result gets
{ NONLOCAL Some_var ;
  Some_var := count 25 ;
  Other_var := 5 5 reshape Some_var ;
  EACH average cols Other_var }


Other_block gets
{ NONLOCAL Non_loc_var;
  average3 IS OP A { sum A / tally A } ;
  Non_loc_var := count 25 ;
  Loc_var := 5 5 reshape Non_loc_var ;
  EACH average3 cols Loc_var }

% Parametrized operation ;

compare IS OPERATION X Y {
	Maxs := EACH max X Y ;
	Mins := EACH min X Y ;
	>= Maxs and <= Mins }


Comp_res := 2 5 3 9 compare 6 4 5 ;
Comp_res2 := compare [3 4 5 6, 4 5 6 7] ;

% Nameless operation ;

Lambda_res gets
	(OPERATION X Y {
		Maxs := EACH max X Y ;
		Mins := EACH min X Y ;
		>= Maxs and <= Mins }) [3 4 5 6, 4 5 6 7] ;

Lambda_res2 gets 3 4 5 6
	(OPERATION X Y {
		Maxs := EACH max X Y ;
		Mins := EACH min X Y ;
		>= Maxs and <= Mins }) 4 5 6 7 ;

% Transformer ;

TWICE is TRANSFORMER f OPERATION A { f f A }

Twice_res := TWICE (5+) 20 ;

RECURR IS TR process_leaf process_label comb OP Tree {
	IF tally Tree = 1 THEN
		process_leaf first Tree
	ELSE
		New_label := process_label first Tree ;
		Children := rest Tree ;
		New_children := EACH ( RECURR [process_leaf,process_label,comb]) Children ;
		New_label comb New_Children
	ENDIF }

A_tree gets
	["Root,
		["L10,
			["L20,25,13],
			["L21,-20,45,15]],
		["L11,100],
		["L12,1000]] ;


leaves IS RECURR [pass,pass,link second] ;
sum_leaves IS RECURR [pass,pass,sum second] ;
add_one IS RECURR [1+,pass,hitch] ;
change_labels IS RECURR [pass,"LAB first,hitch] ;


Edges := ("a "b)("a "c)("c "g)("g "k)("d "e)("e "k) ;

pathtest is OP Edges Node1 Node2 {
  Lnksfrm_node1 := EACH first Edges match Node1 sublist Edges ;
  IF Node2 in EACH second Lnksfrm_node1 THEN
    True
  ELSE
    Linkednodes := EACH second Lnksfrm_node1 ;
    Found := False ;
    I := 0 ;
    WHILE not Found and (I < tally Linkednodes) DO
      Found := pathtest Edges Linkednodes@I Node2 ;
      I := I + 1 ;
    ENDWHILE ;
    Found
  ENDIF }
  

findpath is OP Edges Node1 Node2 {
  Lnksfrm_node1 := EACH first Edges match Node1 sublist Edges ;
  IF Node2 in EACH second Lnksfrm_node1 THEN
    Node1 Node2
  ELSE
    Linkednodes := EACH second Lnksfrm_node1 ;
    Foundpath := Null ;
    I := 0 ;
    WHILE empty Foundpath and (I < tally Linkednodes) DO
      Foundpath := findpath Edges Linkednodes@I Node2 ;
      I := I + 1 ;
    ENDWHILE ;
    IF not empty Foundpath THEN Foundpath := Node1 hitch Foundpath ; ENDIF ;
    Foundpath
  ENDIF }
  
  
Edges2 := ("a "b)("a "c)("c "g)("g "k)("d "e)("e "k)("a "d) ;

% Only for acyclic graphs ;
findpaths is OP Edges Node1 Node2 {
  Lnksfrm_node1 := EACH first Edges match Node1 sublist Edges ;
  IF Node2 in EACH second Lnksfrm_node1 THEN
    Paths := [ Node1 node2 ] ;
  ELSE
    Paths := Null ;
  ENDIF ;
  Linkednodes := EACH second Lnksfrm_node1 ;
  FOR Node WITH Linkednodes except [Node2] DO
    Newpaths := findpaths Edges Node Node2 ;
    Paths := Paths link (Node1 EACHRIGHT hitch Newpaths) ;
  ENDFOR ;
  Paths }
  
% Works with cyclic graphs ;
findpaths2 is OPERATION Edges Node1 Node2 Encountered {
  Lnksfrm_node1 := EACH first Edges match Node1 sublist Edges ;
  If Node2 in EACH second Lnksfrm_node1 THEN
    Paths := [ Node1 Node2 ] ;
  ELSE
    Paths := Null ;
  ENDIF ;
  Encountered := Encountered append Node1 ;
  Linkednodes := EACH second Lnksfrm_node1 except Encountered ;
  FOR Node WITH Linkednodes except [Node2] DO
    Newpaths := findpaths2 Edges Node Node2 Encountered ;
    Paths := Paths link (Node1 EACHRIGHT hitch Newpaths)
  ENDFOR ;
  Paths }
  
  
Cyclic_graph := ("a "b)("b "c)("b "d)("c "a)("d "c) ;

Result := eval parse scan '2*8' ;
Result2 := execute '4*8' ;




